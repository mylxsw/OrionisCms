// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package name.orionis.cms.extensions.content.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import name.orionis.cms.extensions.content.model.Category;
import name.orionis.cms.extensions.content.model.CategoryDataOnDemand;
import name.orionis.cms.extensions.content.service.CategoryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CategoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CategoryDataOnDemand: @Component;
    
    private Random CategoryDataOnDemand.rnd = new SecureRandom();
    
    private List<Category> CategoryDataOnDemand.data;
    
    @Autowired
    CategoryService CategoryDataOnDemand.categoryService;
    
    public Category CategoryDataOnDemand.getNewTransientCategory(int index) {
        Category obj = new Category();
        setCate_name(obj, index);
        setChild(obj, index);
        setDescription(obj, index);
        setImage(obj, index);
        setIs_menu(obj, index);
        setLetter(obj, index);
        setList_order(obj, index);
        setParent_id(obj, index);
        setSethtml(obj, index);
        setSettings(obj, index);
        setSite_id(obj, index);
        setStyle(obj, index);
        setUrl(obj, index);
        return obj;
    }
    
    public void CategoryDataOnDemand.setCate_name(Category obj, int index) {
        String cate_name = "cate_name_" + index;
        if (cate_name.length() > 50) {
            cate_name = cate_name.substring(0, 50);
        }
        obj.setCate_name(cate_name);
    }
    
    public void CategoryDataOnDemand.setChild(Category obj, int index) {
        Boolean child = Boolean.TRUE;
        obj.setChild(child);
    }
    
    public void CategoryDataOnDemand.setDescription(Category obj, int index) {
        String description = "description_" + index;
        if (description.length() > 500) {
            description = description.substring(0, 500);
        }
        obj.setDescription(description);
    }
    
    public void CategoryDataOnDemand.setImage(Category obj, int index) {
        String image = "image_" + index;
        if (image.length() > 100) {
            image = image.substring(0, 100);
        }
        obj.setImage(image);
    }
    
    public void CategoryDataOnDemand.setIs_menu(Category obj, int index) {
        Boolean is_menu = Boolean.TRUE;
        obj.setIs_menu(is_menu);
    }
    
    public void CategoryDataOnDemand.setLetter(Category obj, int index) {
        String letter = "letter_" + index;
        if (letter.length() > 50) {
            letter = letter.substring(0, 50);
        }
        obj.setLetter(letter);
    }
    
    public void CategoryDataOnDemand.setList_order(Category obj, int index) {
        short list_order = new Integer(index).shortValue();
        obj.setList_order(list_order);
    }
    
    public void CategoryDataOnDemand.setParent_id(Category obj, int index) {
        int parent_id = index;
        obj.setParent_id(parent_id);
    }
    
    public void CategoryDataOnDemand.setSethtml(Category obj, int index) {
        Boolean sethtml = Boolean.TRUE;
        obj.setSethtml(sethtml);
    }
    
    public void CategoryDataOnDemand.setSettings(Category obj, int index) {
        String settings = "settings_" + index;
        if (settings.length() > 1000) {
            settings = settings.substring(0, 1000);
        }
        obj.setSettings(settings);
    }
    
    public void CategoryDataOnDemand.setSite_id(Category obj, int index) {
        short site_id = new Integer(index).shortValue();
        obj.setSite_id(site_id);
    }
    
    public void CategoryDataOnDemand.setStyle(Category obj, int index) {
        String style = "sty_" + index;
        if (style.length() > 5) {
            style = style.substring(0, 5);
        }
        obj.setStyle(style);
    }
    
    public void CategoryDataOnDemand.setUrl(Category obj, int index) {
        String url = "url_" + index;
        if (url.length() > 100) {
            url = url.substring(0, 100);
        }
        obj.setUrl(url);
    }
    
    public Category CategoryDataOnDemand.getSpecificCategory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Category obj = data.get(index);
        Long id = obj.getId();
        return categoryService.findCategory(id);
    }
    
    public Category CategoryDataOnDemand.getRandomCategory() {
        init();
        Category obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return categoryService.findCategory(id);
    }
    
    public boolean CategoryDataOnDemand.modifyCategory(Category obj) {
        return false;
    }
    
    public void CategoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = categoryService.findCategoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Category' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Category>();
        for (int i = 0; i < 10; i++) {
            Category obj = getNewTransientCategory(i);
            try {
                categoryService.saveCategory(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
